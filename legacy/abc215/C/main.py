#!/usr/bin/env python3
import sys
import itertools
import sys
import copy
sys.setrecursionlimit(10**6)  # 再帰関数使う時有効


def solve(S: str, K: int):

    # S = list(S)
    # S.sort()
    # dic = {chr(ord('a')+i): i for i in range(ord('z')-ord('a')+1)}
    # dic_rev = {i: chr(ord('a')+i) for i in range(ord('z')-ord('a')+1)}
    # convert_n = {S[i]: i for i in range(len(set(dic)))}
    # n = [0]*len(set(S))
    # for i in range(len(S)):
    #     n[convert_n[S[i]]] += 1
    # Max_S = convert_n[S[-1]]
    n = 1
    s = sorted(S)
    while True:
        lis = []

        if n == K:
            break
        for i in reversed(range(len(S))):

            if lis and s[i] < max(lis):
                new_s = s[:i]
                for num, k in enumerate(sorted(lis)):
                    if k > s[i]:
                        new_s.append(lis.pop(num))
                        break
                lis.append(s[i])
                new_s = new_s+sorted(lis)
                break
            else:
                lis.append(s[i])
        s = new_s[::1]
        n += 1
    print(''.join(s))

    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = next(tokens)  # type: str
    K = int(next(tokens))  # type: int
    solve(S, K)


if __name__ == '__main__':
    main()
