#!/usr/bin/env python3
from collections import deque


def color(edge, TOP, N, color_exit, color_num,  now):
    s = {TOP[now]}
    for i in edge[now]:
        if TOP[i] in s:
            return 0
        elif TOP[i] != 0:
            s.add(TOP[i])

    if color_num == N:
        return 1

    next = edge[now]
    next_color = {1, 2, 3}-s

    ans = 0
    for i in next:
        if i in color_exit:
            continue
        next_TOP = list(TOP)
        for j in next_color:

            next_TOP[i] = j

            ans += color(edge, next_TOP, N, color_exit | {i}, color_num+1, i)

    return ans

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)


def main():
    N, M = map(int, input().split())
    AB = [[int(i)-1 for i in input().split()] for j in range(M)]

    edge = [[] for i in range(N)]
    for i in range(M):
        edge[AB[i][0]].append(AB[i][1])
        edge[AB[i][1]].append(AB[i][0])
    Set = []
    exit = set()
    now = 0
    for i in range(N):
        if i in exit:
            continue
        que = deque()
        Set.append({i})
        for j in edge[i]:
            que.append(j)

        while que:
            now = que.pop()
            if now in exit:
                continue

            exit = exit | {now}
            Set[-1].add(now)
            for j in edge[now]:
                que.append(j)

    ans = 1
    for i in range(len(Set)):
        top = list(Set[i])[0]
        TOP = [0 for i in range(N)]
        TOP[top] = 1
        temp = color(edge, TOP, len(Set[i]), {top}, 1, top)
        ans *= temp*3
    print(ans)
    # Failed to predict input format
    return


if __name__ == '__main__':

    main()
