#!/usr/bin/env python3
import sys
import copy


def check(a, b, c, Len, li, remain):
    if len(li) < Len:
        rem = copy.deepcopy(remain)
        for i in range(len(rem)):
            temp = rem.pop()
            check(a, b, c, Len, li+[temp], remain-{temp})
    else:
        now = copy.copy(li)
        a_num = 0
        b_num = 0
        c_num = 0
        for i in range(len(a)):
            a_num += li[a[i]]*10**i
        for i in range(len(b)):
            b_num += li[b[i]]*10**i
        for i in range(len(c)):
            c_num += li[c[i]]*10**i
        if a_num+b_num == c_num:
            print(a_num)
            print(b_num)
            print(c_num)
            exit()


def solve(S: "List[str]"):
    dic_str = {}
    Len = 0
    a = []
    b = []
    c = []
    for s in S[0]:
        if s not in dic_str:
            dic_str[s] = Len
            Len += 1
        a.append(dic_str[s])
    for s in S[1]:
        if s not in dic_str:
            dic_str[s] = Len
            Len += 1
        b.append(dic_str[s])
    for s in S[2]:
        if s not in dic_str:
            dic_str[s] = Len
            Len += 1
        c.append(dic_str[s])

    dic_list = []

    check(a, b, c, Len,  dic_list, {i for i in range(10)})

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = [next(tokens) for _ in range(3)]  # type: "List[str]"
    solve(S)


if __name__ == '__main__':
    main()
