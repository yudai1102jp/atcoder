#!/usr/bin/env python3
import sys
import collections


def solve(N: int, M: int, A: "List[int]", B: "List[int]"):

    allow = [[] for _ in range(N)]
    for i in range(M):
        allow[A[i]-1].append(B[i]-1)

    able = [{i} for i in range(N)]

    que = collections.deque()

    ok = set()
    now = []
    for i in range(N):
        for j in allow[i]:
            que.append(j)
        while que:
            q = que.pop()

            able[i].add(q)
            for j in allow[q]:
                if j in able[i]:
                    continue
                que.append(j)

        # for j in allow[i]:
        #     if j in ok:
        #         able[i] = able[i]+able[j]
        #     else:
        #         able[i].add(j)

    print(sum([len(se) for se in able]))

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)


if __name__ == '__main__':
    main()
