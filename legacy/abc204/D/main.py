#!/usr/bin/env python3
import sys
import collections


class Cal():
    def __init__(self, T, N, s, Sum, sum_T) -> None:
        self.T = T
        self.N = N
        self.Sum = Sum
        self.stop = s
        self.sum_T = sum_T

    def cal(self, a, now):
        if now == self.N-1:
            return a
        if a > self.stop:
            return 10000000
        if self.sum_T[now-1]-a > self.stop:
            return 10000000

        temp1 = self.cal(a+self.T[now], now+1)
        temp2 = self.cal(a, now+1)
        if abs(self.Sum-2*temp1) < abs(self.Sum-2*temp2):
            return temp1
        else:
            return temp2


def solve(N: int, T: "List[int]"):

    if N <= 2:
        print(max(T))
        return

    T.sort()
    T.reverse()
    Sub = 0
    Sum = sum(T)

    for i in range(N-1):
        Sub = max(Sub, T[i]-T[i+1])

    a = T[0]-T[1]
    b = 0
    time = T[1]
    now = 2
    while True:
        if now == N:
            break

        if a == 0:
            a += T[now]
        else:
            b += T[now]
        now += 1
        if a < b:
            b -= a
            time += a
            a = 0
        else:
            a -= b
            time += b
            b = 0
    time += max(a, b)

    sum_T = [T[0]]
    for i in range(1, N):
        sum_T.append(sum_T[-1]+T[i])
    c = Cal(T, N, time, Sum, sum_T)
    print(c.cal(T[0], 1))

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, T)


if __name__ == '__main__':
    main()
