#!/usr/bin/env python3
import sys
import collections


def solve(N: int, T: "List[int]"):
    S = sum(T)
    dp = [[False for j in range(S+1)] for i in range(N+1)]

    # s = {0}
    # for i in range(N):
    #     new = set()
    #     for j in s:
    #         new.add(j+T[i])
    #     s = s | new
    # for i in range((S+1)//2, S+1):
    #     if i in s:
    #         print(i)
    #         return

    dp[0][0] = True
    for i in range(N):
        for j in range(S+1):
            dp[i+1][j] = dp[i+1][j] or dp[i][j]
            if j-T[i] < 0:
                continue
            dp[i+1][j] = dp[i+1][j] or dp[i][j-T[i]]

    for i in range((S+1)//2, S+1):
        if dp[N][i]:
            print(i)
            return

# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, T)


if __name__ == '__main__':
    main()
