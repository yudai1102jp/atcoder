#!/usr/bin/env python3
import sys


def solve(N: int, Q: int, A: "List[int]", K: "List[int]"):
    A.sort()
    A.append(int(1e19))
    N += 1
    t = [[0, 0] for i in range(N + 1)]

    t[1][0] = A[0]-1
    t_now = 2
    for i in range(1, N):
        if A[i-1]+1 == A[i]:
            continue
        t[t_now][0] = A[i]-1-i
        t[t_now][1] = i
        t_now += 1
    t = t[:t_now]

    for i in range(Q):
        ok = 0
        ng = t_now
        k = K[i]
        while ok+1 != ng:
            now = (ok+ng)//2
            if t[now][0] < k:
                ok = now
            else:
                ng = now
        print(k+t[ng][1])

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    K = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, Q, A, K)


if __name__ == '__main__':
    main()
