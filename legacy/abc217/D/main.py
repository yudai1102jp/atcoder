#!/usr/bin/env python3
import sys


class Node:
    def __init__(self, s, e):
        self.left = None
        self.right = None
        self.s = s
        self.e = e
        self.x = None

        self.leaf = True


class Tree:
    def __init__(self, L):

        self.root = Node(0, L)

    def add(self, x):
        node = self.get_leaf(x)
        node.x = x
        node.leaf = False
        node.left = Node(node.s, x)
        node.right = Node(x, node.e)

    def search(self, x):
        node = self.get_leaf(x)
        return node.e-node.s

    def get_leaf(self, x):
        node = self.root
        while not node.leaf:
            if node.x < x:
                node = node.right
            else:
                node = node.left

        return node


def solve(L: int, Q: int, C: "List[int]", X: "List[int]"):

    cut = [0, L]
    tree = Tree(L)
    for q in range(Q):
        c = C[q]
        x = X[q]

        if c == 1:
            tree.add(x)
        else:
            print(tree.search(x))

    return


# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    L = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    c = [int()] * (Q)  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        c[i] = int(next(tokens))
        x[i] = int(next(tokens))
    solve(L, Q, c, x)


if __name__ == '__main__':
    main()
