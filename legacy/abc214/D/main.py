#!/usr/bin/env python3
import sys
import heapq


def solve(N: int, u: "List[int]", v: "List[int]", w: "List[int]"):

    def count_up(root, now, n, path_):

        Max = path_[1]
        Max_index = path_[2]
        for next in path[now]:
            if next[0] == root:
                continue
            temp = count_up(now, next[0], n, next)
            if Max < temp[1]:
                Max = temp[1]
                Max_index = temp[2]
            n += temp[0]

        return n + 1, Max, Max_index

    def dfs(now, weight, N):
        now_u = u[now]
        now_v = v[now]
        ans = 0
        # if path[now_v] > 1:
        next_vn, Max_weightv, Max_indexv = count_up(now_u, now_v, 0, path[now_v])

        # if path[now_u] > 1:
        next_un, Max_weightu, Max_indexu = count_up(
            now_v, now_u, 0, path[now_u])

        ans += next_un*next_vn*weight
        path[now_u].remove(now_v)
        path[now_v].remove(now_u)

        if next_vn > 1:
            ans += dfs(Max_indexv, Max_weightv, next_vn)
        if next_un > 1:
            ans += dfs(Max_indexu, Max_weightu, next_un)
        return ans

    path = [[] for i in range(N)]
    caled = set()

    weight = [[] for i in range(N)]
    max_weight = 0
    max_index = 0
    for i in range(N-1):

        weight[i] = (w[i], u[i], v[i])
        if w[i] > max_weight:
            max_weight = w[i]
            max_index = i
        path[u[i]-1].append((v[i], w[i], i))
        path[v[i]-1].append((u[i], w[i], i))

    print(dfs(max_index, max_weight, N))
    return 0


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    u = [int()] * (N - 1)  # type: "List[int]"
    v = [int()] * (N - 1)  # type: "List[int]"
    w = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        u[i] = int(next(tokens))-1
        v[i] = int(next(tokens))-1
        w[i] = int(next(tokens))
    solve(N, u, v, w)


if __name__ == '__main__':
    main()
