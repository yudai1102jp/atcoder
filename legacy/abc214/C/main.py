#!/usr/bin/env python3
import sys


def solve(N: int, S: "List[int]", T: "List[int]"):
    Min_index = -1
    Min = 1e9+4
    for i in range(N):
        if Min > T[i]:
            Min = T[i]
            Min_index = i

    Min_get = [-1]*N
    now_index = Min_index
    Min_get[now_index] = T[now_index]
    now = Min
    s = S[now_index]
    now_index += 1

    if now_index == N:
        now_index = 0
    while True:

        if Min_get[now_index] == -1:
            if now+s > T[now_index]:
                now = T[now_index]
                Min_get[now_index] = now
            else:
                now += s
                Min_get[now_index] = now
        elif Min_get[now_index] > now+s:
            now += s
            Min_get[now_index] = now
        else:
            break

        s = S[now_index]
        now_index += 1
        if now_index == N:
            now_index = 0
    for i in Min_get:
        print(i)
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    T = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, S, T)


if __name__ == '__main__':
    main()
