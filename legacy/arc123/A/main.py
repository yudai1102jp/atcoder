#!/usr/bin/env python3
import sys


def solve(A: "List[int]"):
    if A[0]==A[1]==A[2]:
        print(0)
    elif A[0]==A[1] and A[0]<A[2]:
        if (A[2]-A[0])%2==0:
            print((A[2]-A[0])//2)
        else:
            print((A[2]-A[0]+1)//2+1)
    elif A[0] < A[1] < A[2]:
        if A[1]-A[0]+A[1]>=A[2]:
            print(min(A[1]-A[0]+A[1]-A[2], A[1]-A[0]+A[1]-A[0]))
        else:
            if (A[2]-A[0])%2==0:
                print((A[2]-A[0])//2+A[0])
            else:
                print((A[2]-A[0]-1)//2+A[0]+1)

    elif (A[0] == A[1] and A[2] < A[1]) or (A[0] == A[2] and A[1] < A[2]) or (A[2] == A[1] and A[0] < A[1]):

        print(max(A)-min(A))
    else:
        if (A[0]-A[1])<A[1]-A[2]:
            print(A[1]-(A[0]-A[1])-A[2])
        else:
            if (A[2]-A[0])%2==0:
                print(A[0]-(A[0]-A[2])//2-A[1])
            else:
                print(A[0]-(A[0]-A[2]-1)//2-A[1]+1)

    

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = [int(next(tokens)) for _ in range(3)]  # type: "List[int]"
    solve(A)

if __name__ == '__main__':
    main()
