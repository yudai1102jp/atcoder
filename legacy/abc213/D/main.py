#!/usr/bin/env python3
# import sys
import sys
sys.setrecursionlimit(10**6)  # 再帰関数使う時有効


def path(now, root, load):
    # if root==0:
    # print(now , end=' ')
    if root != 0:

        print('', now, end='')
    else:
        print(now, end='')

    for ne in load[now]:
        if ne == root:
            continue
        path(ne, now, load)

        print('', now, end='')


def solve(N: int, A: "List[int]", B: "List[int]"):
    load = [[] for i in range(N+1)]
    first_root = [-1]*N
    for i in range(N-1):
        load[A[i]].append(B[i])
        load[B[i]].append(A[i])
    for i in load:
        i.sort()
    path(1, 0, load)
    print()
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)


if __name__ == '__main__':
    main()
