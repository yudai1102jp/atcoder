#!/usr/bin/env python3
import sys


def solve(H: int, W: int, N: int, A: "List[int]", B: "List[int]"):
    # h = len(A)
    # w = len(B)

    new_A = sorted(A)
    new_B = sorted(B)
    # new_B = sorted(list(set(B)))
    # new_B = sorted(B)
    new__A = {}
    new__B = {}
    # point=sorted([A,B] ,key=lambda x: x[0])
    # point = sorted([A, B])
    now = 1
    for i in range(N):
        if not new_A[i] in new__A:
            new__A[new_A[i]] = now
            now += 1
    now = 1
    for i in range(N):
        # if not new_A[i] in new__A:
        #     new__A[new_A[i]] = i+1
        if not new_B[i] in new__B:
            new__B[new_B[i]] = now
            now += 1

    for i in range(N):
        print(f'{new__A[A[i]]} {new__B[B[i]]}')

    # board=[0 for i in range() set()]
    # board_n=[[] for i in range(set(new_A))]

    # pre=point[0][0]
    # now=0
    # for i in range(N):
    #     if pre==point[i][0]:
    #         board_n[now].append(point[i][1])
    #     else:
    #         now+=1
    #     pre=point[i][0]

    # board=[[0]*yoko for i in range()]
    # for i in range(N):
    #     for j in

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(H, W, N, A, B)


if __name__ == '__main__':
    main()
