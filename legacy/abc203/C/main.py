#!/usr/bin/env python3
import sys
from operator import itemgetter

def solve(N: int, K: int, A: "List[int]", B: "List[int]"):
    money=K
    c=zip(A, B)
    c=sorted(c, key=itemgetter(0))
    A,B=zip(*c)
    now=0
    for i in range(N):
        if A[i]-now <=money:
            money+=B[i]-(A[i]-now)
            now=A[i]
        else:
            break
    print(now+money)

    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, K, A, B)

if __name__ == '__main__':
    main()
