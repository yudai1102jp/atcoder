#!/usr/bin/env python3
import sys


def solve(N: int, K: int, A: "List[List[int]]"):
    height = set()
    ans=10e9+4
    center=(K*K)//2
    A_t = [list(x) for x in zip(*A)]

    

    for i in range(N-K+1):
        A_list=[A[i+j][i:i+K] for j in range(K)]
        temp=sum(A_list, [])
        temp.sort(reverse=True)
        ans=min(ans, temp[center])
        
        A_t_list = [list(x) for x in zip(*A_list)]
        for y in range(i+K, N):
            A_list = A_list[1:]+[A[y][i:K+i]]
            temp=sum(A_list, [])
        
            temp.sort(reverse=True)
            ans=min(ans, temp[center])
            


       
        for y in range(i+K, N):
            A_t_list = A_t_list[1:]+[A[y][i:K+i]]
            temp=sum(A_t_list, [])

            temp.sort(reverse=True)
            ans=min(ans, temp[center])
                    
    
    print(ans)

    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(N)] for _ in range(N)]  # type: "List[List[int]]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
