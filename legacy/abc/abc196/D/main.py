#!/usr/bin/env python3
import sys
import copy


def solve(i, j, H: int, W: int, A: int, B: int, used):
    if j == W:
        j = 0
        i += 1
    if not(A or B):
        return 1
    if used[i][j]:
        return solve(i, j+1, H, W, A, B, used)
    if i == H:
        return 0

    ans = 0

    if B:
        li = copy.deepcopy(used)
        li[i][j] = 1
        ans += solve(i, j+1, H, W, A, B-1, li)
    if A and j+1 < W and not used[i][j+1]:
        li = copy.deepcopy(used)
        li[i][j] = 1
        li[i][j+1] = 1
        ans += solve(i, j+1, H, W, A-1, B, li)
    if A and i+1 < H and not used[i+1][j]:
        li = copy.deepcopy(used)
        li[i][j] = 1
        li[i+1][j] = 1
        ans += solve(i, j+1, H, W, A-1, B, li)
    return ans


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int

    used = [[0]*H for i in range(W)]
    print(solve(0, 0, H, W, A, B, used))


if __name__ == '__main__':
    main()
