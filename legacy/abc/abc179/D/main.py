#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int


def solve(N: int, K: int, L: "List[int]", R: "List[int]"):
    dp = [0]*(N+2)
    now = 1
    for i in range(1, N+1):
        now += dp[i]
        now %= MOD
        for k in range(K):
            if i+L[k] <= N:
                dp[i+L[k]] = (now+dp[i+L[k]]) % MOD

            if i+R[k]+1 <= N:
                dp[i+R[k]+1] = (dp[i+R[k]+1] - now) % MOD

    print(dp[N] % MOD)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    L = [int()] * (K)  # type: "List[int]"
    R = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, K, L, R)


if __name__ == '__main__':
    main()
