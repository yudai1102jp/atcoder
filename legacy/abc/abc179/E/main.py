#!/usr/bin/env python3
import sys
import math


def solve(N: int, X: int, M: int):
    now = X
    cou = 0
    ans = 0
    dp = set()
    dp_list = [0]*M

    while True:
        if now in dp:
            rep = dp_list.index(now)
            break
        dp.add(now)
        dp_list[cou] = now
        cou += 1
        ans += now
        now = pow(now, 2, M)
    determin = N-cou
    if N <= cou:
        print(sum(dp_list[:N]))
        return

    ans += sum(dp_list[rep:]) * (determin//(cou-rep))
    for i in range((N-cou) % (cou-rep)):

        ans += dp_list[rep+i]
    print(ans)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    solve(N, X, M)


if __name__ == '__main__':
    main()
