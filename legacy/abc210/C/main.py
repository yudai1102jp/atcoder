#!/usr/bin/env python3
import sys
from collections import deque


def solve(N: int, K: int, c: "List[int]"):
    ans = 0
    now = {i: 0 for i in c}
    now_num = 0
    q = deque([])
    for i in range(N):
        if K > i:
            if now[c[i]] == 0:
                now_num += 1
            now[c[i]] += 1
            q.append(c[i])
            ans = now_num
            continue
        if now[c[i]] == 0:
            now_num += 1
        now[c[i]] += 1
        q.append(c[i])
        left = q.popleft()
        now[left] -= 1
        if now[left] == 0:
            now_num -= 1
        ans = max(ans, now_num)
    print(ans)

    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    c = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, c)


if __name__ == '__main__':
    main()
