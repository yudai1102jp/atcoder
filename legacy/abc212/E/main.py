#!/usr/bin/env python3
import sys
from collections import Counter

MOD = 998244353  # type: int


def solve(N: int, M: int, K: int, U: "List[int]", V: "List[int]"):
    dp = [[0]*(5004) for i in range(5004)]
    load = [[] for i in range(N+1)]

    for i in range(M):
        load[U[i]].append(V[i])
        load[V[i]].append(U[i])

    for i in range(1, N+1):

        dp[1][i] = 1
    for i in load[1]:
        dp[1][i] = 0

    dp[1][1] = 0
    for i in range(1, K+1):
        S = 0
        for j in range(1, 1+N):
            S += dp[i][j]
        for j in range(1, 1+N):
            No = 0
            for k in load[j]:
                No += dp[i][k]
            dp[i+1][j] = (S-dp[i][j]-No) % MOD

    print(dp[K][1])

    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    U = [int()] * (M)  # type: "List[int]"
    V = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        U[i] = int(next(tokens))
        V[i] = int(next(tokens))
    solve(N, M, K, U, V)


if __name__ == '__main__':
    main()
