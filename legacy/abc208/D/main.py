#!/usr/bin/env python3
import sys
import sys
from heapq import heappush, heappop
INF = 10**18


def f(G, s,N, k):

    q = [(0, s)]
    dist = [INF] * N
    dist[s] = 0
    while q:
        d, v = heappop(q)
        if dist[v] != d or v>=k:
            continue

        for i in range(len(G[v])):
            nv,c=G[v][i]
            nd = d + c
            if dist[nv] <= nd:
                continue
            dist[nv] = nd
            heappush(q, (nd, nv))
    return dist


def solve(N: int, M: int, A: "List[int]", B: "List[int]", C: "List[int]", load):
    ans=0
    for k in range(1,N+1):
        for s in range(N):
            if s<k:

                di=f(load[:k], s,N, k)
            else:
                di=f(load[:k]+load[s], s,N, k)

            print(k)
            print(di)
            ok =set()
            for t in range(k):
                root=di[t]
                ans+=root
                ok.add(t)

            if s<k:
                for i in load[s]:
                    ans+=i[]


                if di[t]==INF:
                    continue
                ans+=di[t]
            
    print(ans)
        



    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    C = [int()] * (M)  # type: "List[int]"
    load = [[] for i in range(N)]
    for i in range(M):
        a = int(next(tokens))-1
        b = int(next(tokens))-1
        c = int(next(tokens))
        load[a].append((b, c))
 
        A[i] = a
        B[i] = b
        C[i] = c

    solve(N, M, A, B, C, load)


if __name__ == '__main__':
    main()
