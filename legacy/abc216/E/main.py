#!/usr/bin/env python3
import sys


def solve(N: int, K: int, A: "List[int]"):
    A.sort(reverse=True)
    now_allow = 1
    now_point = A[0]
    k = 0
    ans = 0
    while True:
        if now_allow == N:
            sub = now_point
        else:
            sub = now_point - A[now_allow]
        sub_k = sub*now_allow

        if k+sub_k > K:
            nokori = K-k
            nokori_row = nokori//now_allow
            nokori_column = nokori % now_allow

            ans += (now_point+now_point-nokori_row+1)*nokori_row//2*now_allow
            now_point = now_point-nokori_row
            ans += now_point*nokori_column
            break
        if now_allow == N:
            ans += (now_point+1)*sub//2*now_allow
            break
        ans += (now_point+A[now_allow]+1)*sub//2*now_allow

        now_point = A[now_allow]
        k += sub_k
        if now_allow == N:
            break
        else:
            now_allow += 1

    print(ans)
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)


if __name__ == '__main__':
    main()
