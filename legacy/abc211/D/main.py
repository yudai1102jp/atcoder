#!/usr/bin/env python3
from copy import copy
import sys
from collections import deque
MOD = 1000000007  # type: int


def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    load = [[] for i in range(N+1)]
    for i in range(M):
        load[A[i]].append(B[i])
        load[B[i]].append(A[i])

    count = [0]*(N+1)
    count[1] = 1
    dist = [0]*(N+1)
    dist[1] = 1

    next_list = [0]*(N+1)
    count[1] = 1
    next_list[1] = 1

    q = deque([1])
    ok = set()
    goal = 10**6
    flag = True
    now_term = -1

    while q:
        now = q.popleft()
        for ne_ in load[now]:
            if dist[ne_] == 0:
                count[ne_] = count[now]
                dist[ne_] = dist[now]+1
                q.append(ne_)

            elif dist[ne_] == dist[now]+1:
                count[ne_] += count[now]
                count[ne_] %= MOD

    print(count[-1])

    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)


if __name__ == '__main__':
    main()
